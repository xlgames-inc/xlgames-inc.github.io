<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>XLE development blog</title>
    <description>XLE development blog</description>
    <link>http://xlgames-inc.github.io</link>
    <pubDate>April 05, 2016</pubDate>
    <item>
      <title>About</title>
      <link>http://xlgames-inc.github.io/about</link>
      <description>&lt;p&gt;XLE is an open-source game engine (currently in development).&lt;/p&gt;

&lt;p&gt;Find us on Github:
    &lt;a href="https://github.com/xlgames-inc/XLE"&gt;https://github.com/xlgames-inc/XLE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Documentation starting point:
    &lt;a href="https://github.com/xlgames-inc/XLE/wiki"&gt;https://github.com/xlgames-inc/XLE/wiki&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Archive</title>
      <link>http://xlgames-inc.github.io/archive</link>
      <description>
  &lt;h2&gt;2016&lt;/h2&gt;
    &lt;h3&gt;April&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;April 05, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;April 04, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkan"&gt;Starting to experiment with Vulkan&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;March&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;March 31, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/compareoitrans"&gt;Comparing different methods for order independent transparency&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 30, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/envshots"&gt;Environment Rendering Screenshots&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 26, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/release0040"&gt;Release v0.04.0&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 25, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/environmentsample"&gt;Environment Sample Streamlining&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 14, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/newtoolfeatures"&gt;Latest Tool Features&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;February&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;February 05, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmittedspecular3"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;February 01, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/improvedibl"&gt;Improved IBL&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;January&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;January 29, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmittedspecular2"&gt;Transmitted specular progress&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 26, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/assetpathscripts"&gt;Processing textures with the XLE scriptable asset path&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 25, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmittedspecular"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 22, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmissionnodegraph"&gt;Transmission Node Diagram&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 21, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;h2&gt;2015&lt;/h2&gt;
    &lt;h3&gt;December&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;December 16, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 11, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 09, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 04, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/whattodofirst"&gt;What to do first&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 02, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 01, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/first"&gt;First post&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Categories</title>
      <link>http://xlgames-inc.github.io/categories</link>
      <description>
&lt;ul class="tag_box inline"&gt;
  &lt;li&gt;
    &lt;a href="/categories#XLE-ref"&gt;XLE &lt;span&gt;19&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/categories#blog-ref"&gt;blog &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;h3&gt;XLE (19)&lt;/h3&gt;
  &lt;ul&gt;
      &lt;li&gt;&lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/assetpathscripts"&gt;Processing textures with the XLE scriptable asset path&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/compareoitrans"&gt;Comparing different methods for order independent transparency&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/environmentsample"&gt;Environment Sample Streamlining&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/envshots"&gt;Environment Rendering Screenshots&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/improvedibl"&gt;Improved IBL&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/newtoolfeatures"&gt;Latest Tool Features&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/release0040"&gt;Release v0.04.0&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/transmissionnodegraph"&gt;Transmission Node Diagram&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/transmittedspecular"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/transmittedspecular2"&gt;Transmitted specular progress&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/transmittedspecular3"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/vulkan"&gt;Starting to experiment with Vulkan&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/whattodofirst"&gt;What to do first&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;h3&gt;blog (1)&lt;/h3&gt;
  &lt;ul&gt;
      &lt;li&gt;&lt;a href="/posts/first"&gt;First post&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Home</title>
      <link>http://xlgames-inc.github.io/</link>
      <description>&lt;p&gt;
    XLE is a open-source (MIT license) game engine currently in development at XL Games.&lt;br /&gt;
    &lt;i&gt;Please note; this engine is still a work in progress!&lt;/i&gt;
&lt;/p&gt;
&lt;p&gt;For more information, see our &lt;a href="https://github.com/xlgames-inc/XLE/wiki"&gt;wiki on Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dev team contact: &lt;a href="mailto:xle@xlgames.com"&gt;xle@xlgames.com&lt;/a&gt; (in English or Korean)&lt;/p&gt;

  &lt;h2&gt;2016&lt;/h2&gt;
    &lt;h3&gt;April&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;April 05, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;April 04, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkan"&gt;Starting to experiment with Vulkan&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;March&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;March 31, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/compareoitrans"&gt;Comparing different methods for order independent transparency&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 30, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/envshots"&gt;Environment Rendering Screenshots&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 26, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/release0040"&gt;Release v0.04.0&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 25, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/environmentsample"&gt;Environment Sample Streamlining&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 14, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/newtoolfeatures"&gt;Latest Tool Features&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;February&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;February 05, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmittedspecular3"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;February 01, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/improvedibl"&gt;Improved IBL&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;January&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;January 29, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmittedspecular2"&gt;Transmitted specular progress&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 26, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/assetpathscripts"&gt;Processing textures with the XLE scriptable asset path&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 25, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmittedspecular"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 22, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmissionnodegraph"&gt;Transmission Node Diagram&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 21, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;h2&gt;2015&lt;/h2&gt;
    &lt;h3&gt;December&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;December 16, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 11, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 09, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 04, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/whattodofirst"&gt;What to do first&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 02, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 01, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/first"&gt;First post&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

&lt;p&gt;&lt;img src="/assets/media/NyraAndDragon1.png"&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;br /&gt; &lt;span class="date"&gt;April 05, 2016&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;As part of the Vulkan prototype, I'm experimenting with compiling HLSL shaders to SPIR-V.&lt;/p&gt;

&lt;p&gt;The Vulkan API doesn't have a high level shader language attached. Instead, it works with a new intermediate bytecode format, called SPIR-V. This works with the LLVM compiler system, so in theory we plug in different front ends to allow various high level languages to compile to SPIR-V.&lt;/p&gt;

&lt;p&gt;That sounds great for the future... But right now, there doesn't seem to be a great path for generating the SPIR-V bytecode.&lt;/p&gt;

&lt;p&gt;All of the XLE shaders are HLSL... So how do we use them with Vulkan? Let's consider the options.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Preprocessor framework&lt;/h2&gt;

&lt;p&gt;One option is to convert the shader code to GLSL using a preprocessor framework. HLSL and GLSL are closely related... But they vary significantly in the way the shader interface is declared (eg, shader resources, vertex elements, built in values, etc).&lt;/p&gt;

&lt;p&gt;We can get around this by using a system of preprocessor macros and complex #includes. We would end up with native HLSL and GLSL code that does the same thing. The core shader code that does the math and lighting (etc) should be fairly compatible between languages... It's just the interface that is an issue.&lt;/p&gt;

&lt;p&gt;However this kind of approach it's a bit awkward, and difficult maintain in the long term. And it might mean dropping support for some of the more unusual D3D features I'm using (such as for dynamic linking).&lt;/p&gt;

&lt;p&gt;Also, it looks like GLSL might not be around a very long time. It could possibly go the way of OpenGL in the medium term. So it doesn't make sense to invest a lot of time into GLSL, just to have to be replaced with something else later.&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Cross compile&lt;/h2&gt;

&lt;p&gt;Another option is to try to convert the HLSL output to SPIR-V by way of a cross compiler.&lt;/p&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/vulkanshaderprototype" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/vulkan"&gt;Starting to experiment with Vulkan&lt;/a&gt;&lt;br /&gt; &lt;span class="date"&gt;April 04, 2016&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;So, it's a simple story -- boy meets API, yada, yada, yada...&lt;/p&gt;

&lt;p&gt;I've started to build some initial experiments with the Vulkan API. Version 1.0 of the API was just released -- and there's an SDK from Valve (called LunarG) around.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Initial impressions&lt;/h2&gt;

&lt;p&gt;My first impressions are very positive! Many of the design ideals and structures of the API are familiar from my days working with consoles (particularly the Sony consoles). This type of API has not been available on open platforms (like Windows) before -- so for people who don't have experience with consoles, it might give an idea of what it's like.&lt;/p&gt;

&lt;p&gt;I'm also really happy how much of the surrounding resources have been made open-source... The samples, shader compilation tool-chain, etc... It's all very effective use of github.&lt;/p&gt;

&lt;p&gt;Khronos have drawn attention to how much input they've gotten from the game engine development community. And it shows in the results. This is the kind of API that an experienced engine developer wants to see.&lt;/p&gt;

&lt;p&gt;I think it's also a model that is much more viable for cross platform development than anything we've seen before. OpenGL had a lot of problems, and DirectX was so tied to the Windows platform. But this feels like something that is truly viable across many platforms (including low end and high end).&lt;/p&gt;

&lt;p&gt;I'm really impressed with how a third party group has managed to build an API that balances the needs of engine developers with the needs of hardware designers. I think Khronos has really shown how this kind of thing should be done -- and it seems like a good model for other APIs (sound, physics hardware, etc).&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Long term viability&lt;/h2&gt;

&lt;p&gt;Vulkan feels like an API that could stick around for awhile. OpenGL has been on it's last legs for a long time... And DirectX always needs constant refreshes to survive. But Vulkan feels like it will be here for awhile. Due to it's cross-platform and long term viability, it's really undermined DirectX and Apple's Metal.&lt;/p&gt;

&lt;p&gt;I felt the same about C++11, when I started using it. The new C++14 is a huge step forward from the old C++98 days. Many of the design patterns we C++ programmers always wanted to use are not much more viable in C++14. Stroustrup said that C++14 "completes" C++11 -- but really, I think it "completes" C++ as a whole.&lt;/p&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/vulkan" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/compareoitrans"&gt;Comparing different methods for order independent transparency&lt;/a&gt;&lt;br /&gt; &lt;span class="date"&gt;March 31, 2016&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;There are has been a lot research on order independent transparency recently. There are a few screenshots comparing the following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Sorted&lt;/strong&gt; -- this mode sorts back-to-front per fragment. It's very expensive, but serves as a reference.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Stochastic&lt;/strong&gt; --  as per nVidia's Stochastic Transparency research. This uses MSAA hardware to estimate the optical depth covering a given sample.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Depth weighted&lt;/strong&gt; -- as per nVidia's other white paper, "A Phenomenological Scattering Model
for Order-Independent Transparency." This is very cheap, and uses a fixed equation based on fragment depth to weight samples.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sorted&lt;/strong&gt;
&lt;br&gt;&lt;img src="/assets/media/OI/Sorted.png"&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stochastic&lt;/strong&gt;
&lt;br&gt;&lt;img src="/assets/media/OI/Stochastic.png"&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Depth Weighted&lt;/strong&gt;
&lt;br&gt;&lt;img src="/assets/media/OI/DepthWeighted.png"&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unordered&lt;/strong&gt;
&lt;br&gt;&lt;img src="/assets/media/OI/Unordered.png"&gt;&lt;/p&gt;

&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/compareoitrans" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/envshots"&gt;Environment Rendering Screenshots&lt;/a&gt;&lt;br /&gt; &lt;span class="date"&gt;March 30, 2016&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;Here are a few screenshots of environment rendering in XLE. I don't have a lot of art I can take screenshots of, so I can't show a very polished scene... But you can see some of the rendering features.&lt;/p&gt;

&lt;p&gt;Look for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;shallow water surface animation&lt;/li&gt;
&lt;li&gt;order independent blending for foliage&lt;/li&gt;
&lt;li&gt;volumetric fog (&amp;amp; related effects)&lt;/li&gt;
&lt;li&gt;dynamic imposters for distant trees&lt;/li&gt;
&lt;li&gt;high res terrain geometry&lt;/li&gt;
&lt;li&gt;terrain decoration spawn&lt;/li&gt;
&lt;li&gt;"contact hardening" shadows&lt;/li&gt;
&lt;li&gt;infinite terrain shadows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;img src="/assets/media/EnvShots/shot47.jpg"&gt;
&lt;br&gt;&lt;img src="/assets/media/EnvShots/shot50.jpg"&gt;
&lt;br&gt;&lt;img src="/assets/media/EnvShots/shot52.jpg"&gt;
&lt;br&gt;&lt;img src="/assets/media/EnvShots/shot55.jpg"&gt;
&lt;br&gt;&lt;img src="/assets/media/EnvShots/shot57.jpg"&gt;
&lt;br&gt;&lt;img src="/assets/media/EnvShots/shot58.jpg"&gt;
&lt;br&gt;&lt;img src="/assets/media/EnvShots/shot65.jpg"&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/envshots" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/release0040"&gt;Release v0.04.0&lt;/a&gt;&lt;br /&gt; &lt;span class="date"&gt;March 26, 2016&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;I've attached a compiled version of the XLE tools to the Github repo.&lt;/p&gt;

&lt;p&gt;This is still an early build -- and hasn't be extensively tested on different hardware. So some features may not work on configurations. If you run in problems, or if you find it interesting, I recommended downloading the source and compiling for yourself.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Download&lt;/h2&gt;

&lt;p&gt;XLE v0.04.1:
&lt;a href="https://github.com/xlgames-inc/XLE/releases/download/v0.04.1/XLE0.04.1.zip"&gt;XLE v0.04.1 Windows x64&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will need &lt;a href="https://www.microsoft.com/en-us/download/details.aspx?id=40784"&gt;Visual C++ Redistributable Packages for Visual Studio 2013&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For older versions of Windows, you will also need to install the .Net runtime.&lt;/p&gt;

&lt;p&gt;Edit -- updated to link to v0.04.1 (which fixes a problem locating the shader compiler dll on some versions of windows).&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Documentation&lt;/h2&gt;

&lt;p&gt;I've included a couple of "Getting Started" docs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="/assets/media/v0.04.0/XLE%20Getting%20Started%20Exporting.pdf"&gt;Getting Started Exporting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/assets/media/v0.04.0/XLE%20Getting%20Started%20with%20Terrain.pdf"&gt;Getting Started with Terrain&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/release0040" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="pagination"&gt;
  &lt;ul&gt;
      &lt;li class="active"&gt;&lt;a href="/posts/index/1"&gt;1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/index/2"&gt;2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/index/3"&gt;3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/index/4"&gt;4&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Pages</title>
      <link>http://xlgames-inc.github.io/pages</link>
      <description>
&lt;ul&gt;
  
    &lt;li&gt;&lt;a href="/about"&gt;About&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/archive"&gt;Archive&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/categories"&gt;Categories&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
  
    &lt;li class="active"&gt;&lt;a href="/pages" class="active"&gt;Pages&lt;/a&gt;&lt;/li&gt;
  
  
  
    &lt;li&gt;&lt;a href="/tags"&gt;Tags&lt;/a&gt;&lt;/li&gt;
  
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Tags</title>
      <link>http://xlgames-inc.github.io/tags</link>
      <description>
&lt;ul class="tag_box inline"&gt;
  &lt;li&gt;
    &lt;a href="/tags#PBR-ref"&gt;PBR &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#AreaLights-ref"&gt;AreaLights &lt;span&gt;5&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Roughness-ref"&gt;Roughness &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Materials-ref"&gt;Materials &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#AssetPath-ref"&gt;AssetPath &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Gradle-ref"&gt;Gradle &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#IBL-ref"&gt;IBL &lt;span&gt;3&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#OITrans-ref"&gt;OITrans &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Tools-ref"&gt;Tools &lt;span&gt;4&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Samples-ref"&gt;Samples &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Screenshots-ref"&gt;Screenshots &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#blog-ref"&gt;blog &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#D3D-ref"&gt;D3D &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#ShaderCompile-ref"&gt;ShaderCompile &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Lights-ref"&gt;Lights &lt;span&gt;3&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Specular-ref"&gt;Specular &lt;span&gt;4&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#GGX-ref"&gt;GGX &lt;span&gt;4&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#MaterialTool-ref"&gt;MaterialTool &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Shaders-ref"&gt;Shaders &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#RectangleLights-ref"&gt;RectangleLights &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Releases-ref"&gt;Releases &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Vulkan-ref"&gt;Vulkan &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#rendering-ref"&gt;rendering &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#API-ref"&gt;API &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#cross platform-ref"&gt;cross platform &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#shaders-ref"&gt;shaders &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#HLSL-ref"&gt;HLSL &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#SPIR-V-ref"&gt;SPIR-V &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;h3 id="PBR-ref"&gt;PBR&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="AreaLights-ref"&gt;AreaLights&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular2"&gt;Transmitted specular progress&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Roughness-ref"&gt;Roughness&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Materials-ref"&gt;Materials&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="AssetPath-ref"&gt;AssetPath&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/assetpathscripts"&gt;Processing textures with the XLE scriptable asset path&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Gradle-ref"&gt;Gradle&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/assetpathscripts"&gt;Processing textures with the XLE scriptable asset path&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="IBL-ref"&gt;IBL&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/assetpathscripts"&gt;Processing textures with the XLE scriptable asset path&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/improvedibl"&gt;Improved IBL&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular3"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="OITrans-ref"&gt;OITrans&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/compareoitrans"&gt;Comparing different methods for order independent transparency&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Tools-ref"&gt;Tools&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/environmentsample"&gt;Environment Sample Streamlining&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/newtoolfeatures"&gt;Latest Tool Features&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmissionnodegraph"&gt;Transmission Node Diagram&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Samples-ref"&gt;Samples&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/environmentsample"&gt;Environment Sample Streamlining&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Screenshots-ref"&gt;Screenshots&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/envshots"&gt;Environment Rendering Screenshots&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="blog-ref"&gt;blog&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/first"&gt;First post&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="D3D-ref"&gt;D3D&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="ShaderCompile-ref"&gt;ShaderCompile&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Lights-ref"&gt;Lights&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/improvedibl"&gt;Improved IBL&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular2"&gt;Transmitted specular progress&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Specular-ref"&gt;Specular&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/improvedibl"&gt;Improved IBL&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular2"&gt;Transmitted specular progress&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular3"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="GGX-ref"&gt;GGX&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/improvedibl"&gt;Improved IBL&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular2"&gt;Transmitted specular progress&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular3"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="MaterialTool-ref"&gt;MaterialTool&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmissionnodegraph"&gt;Transmission Node Diagram&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Shaders-ref"&gt;Shaders&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmissionnodegraph"&gt;Transmission Node Diagram&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="RectangleLights-ref"&gt;RectangleLights&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Releases-ref"&gt;Releases&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/release0040"&gt;Release v0.04.0&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Vulkan-ref"&gt;Vulkan&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/vulkan"&gt;Starting to experiment with Vulkan&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="rendering-ref"&gt;rendering&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/vulkan"&gt;Starting to experiment with Vulkan&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="API-ref"&gt;API&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/vulkan"&gt;Starting to experiment with Vulkan&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="cross platform-ref"&gt;cross platform&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/vulkan"&gt;Starting to experiment with Vulkan&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="shaders-ref"&gt;shaders&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="HLSL-ref"&gt;HLSL&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="SPIR-V-ref"&gt;SPIR-V&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
 
</description>
    </item>
  </channel>
</rss>
