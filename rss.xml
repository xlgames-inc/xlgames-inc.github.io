<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>XLE development blog</title>
    <description>XLE development blog</description>
    <link>http://xlgames-inc.github.io</link>
    <pubDate>February 01, 2017</pubDate>
    <item>
      <title>About</title>
      <link>http://xlgames-inc.github.io/about</link>
      <description>&lt;p&gt;XLE is an open-source game engine (currently in development).&lt;/p&gt;

&lt;p&gt;Find us on Github:
    &lt;a href="https://github.com/xlgames-inc/XLE"&gt;https://github.com/xlgames-inc/XLE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Documentation starting point:
    &lt;a href="https://github.com/xlgames-inc/XLE/wiki"&gt;https://github.com/xlgames-inc/XLE/wiki&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Archive</title>
      <link>http://xlgames-inc.github.io/archive</link>
      <description>
  &lt;h2&gt;2017&lt;/h2&gt;
    &lt;h3&gt;January&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;January 31, 2017&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkanworkshop2017"&gt;Vulkan Workshop / DevU 2017&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 08, 2017&lt;/span&gt; &amp;raquo; &lt;a href="/posts/sphericalharmonics1"&gt;Spherical Harmonics and applications in real time graphics (part 2)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;h2&gt;2016&lt;/h2&gt;
    &lt;h3&gt;December&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;December 27, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/sphericalharmonics0"&gt;Spherical Harmonics and applications in real time graphics&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;June&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;June 19, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/juneupdate"&gt;Latest Update&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;May&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;May 09, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/metallayerrefactoring"&gt;Vulkan prototype - metal layer refactoring&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;May 04, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkanmoreprogress"&gt;Vulkan latest progress -- core lighting working&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;April&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;April 22, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkandeclarativelightingparser"&gt;Vulkan prototype - how many separate render passes in the lighting parser?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;April 15, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkanbigissues"&gt;Vulkan prototype - the big issues&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;April 12, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkantips"&gt;Important Vulkan tips&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;April 08, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkanprototypeslowprogress"&gt;Vulkan prototype slowly progressing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;April 05, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;April 04, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkan"&gt;Starting to experiment with Vulkan&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;March&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;March 31, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/compareoitrans"&gt;Comparing different methods for order independent transparency&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 30, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/envshots"&gt;Environment Rendering Screenshots&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 26, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/release0040"&gt;Release v0.04.0&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 25, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/environmentsample"&gt;Environment Sample Streamlining&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 14, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/newtoolfeatures"&gt;Latest Tool Features&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;February&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;February 05, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmittedspecular3"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;February 01, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/improvedibl"&gt;Improved IBL&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;January&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;January 29, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmittedspecular2"&gt;Transmitted specular progress&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 26, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/assetpathscripts"&gt;Processing textures with the XLE scriptable asset path&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 25, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmittedspecular"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 22, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmissionnodegraph"&gt;Transmission Node Diagram&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 21, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;h2&gt;2015&lt;/h2&gt;
    &lt;h3&gt;December&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;December 16, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 11, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 09, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 04, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/whattodofirst"&gt;What to do first&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 02, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 01, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/first"&gt;First post&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Categories</title>
      <link>http://xlgames-inc.github.io/categories</link>
      <description>
&lt;ul class="tag_box inline"&gt;
  &lt;li&gt;
    &lt;a href="/categories#XLE-ref"&gt;XLE &lt;span&gt;27&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/categories#blog-ref"&gt;blog &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/categories#Misc-ref"&gt;Misc &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;h3&gt;XLE (27)&lt;/h3&gt;
  &lt;ul&gt;
      &lt;li&gt;&lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/assetpathscripts"&gt;Processing textures with the XLE scriptable asset path&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/compareoitrans"&gt;Comparing different methods for order independent transparency&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/environmentsample"&gt;Environment Sample Streamlining&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/envshots"&gt;Environment Rendering Screenshots&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/improvedibl"&gt;Improved IBL&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/juneupdate"&gt;Latest Update&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/metallayerrefactoring"&gt;Vulkan prototype - metal layer refactoring&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/newtoolfeatures"&gt;Latest Tool Features&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/release0040"&gt;Release v0.04.0&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/transmissionnodegraph"&gt;Transmission Node Diagram&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/transmittedspecular"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/transmittedspecular2"&gt;Transmitted specular progress&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/transmittedspecular3"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/vulkan"&gt;Starting to experiment with Vulkan&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/vulkanbigissues"&gt;Vulkan prototype - the big issues&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/vulkandeclarativelightingparser"&gt;Vulkan prototype - how many separate render passes in the lighting parser?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/vulkanmoreprogress"&gt;Vulkan latest progress -- core lighting working&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/vulkanprototypeslowprogress"&gt;Vulkan prototype slowly progressing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/vulkantips"&gt;Important Vulkan tips&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/vulkanworkshop2017"&gt;Vulkan Workshop / DevU 2017&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/whattodofirst"&gt;What to do first&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;h3&gt;blog (1)&lt;/h3&gt;
  &lt;ul&gt;
      &lt;li&gt;&lt;a href="/posts/first"&gt;First post&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;h3&gt;Misc (2)&lt;/h3&gt;
  &lt;ul&gt;
      &lt;li&gt;&lt;a href="/posts/sphericalharmonics0"&gt;Spherical Harmonics and applications in real time graphics&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/sphericalharmonics1"&gt;Spherical Harmonics and applications in real time graphics (part 2)&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Home</title>
      <link>http://xlgames-inc.github.io/</link>
      <description>&lt;p&gt;
    XLE is a open-source (MIT license) game engine currently in development at XL Games.&lt;br /&gt;
    &lt;i&gt;Please note; this engine is still a work in progress!&lt;/i&gt;
&lt;/p&gt;
&lt;p&gt;For more information, see our &lt;a href="https://github.com/xlgames-inc/XLE/wiki"&gt;wiki on Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dev team contact: &lt;a href="mailto:xle@xlgames.com"&gt;xle@xlgames.com&lt;/a&gt; (in English or Korean)&lt;/p&gt;

  &lt;h2&gt;2017&lt;/h2&gt;
    &lt;h3&gt;January&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;January 31, 2017&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkanworkshop2017"&gt;Vulkan Workshop / DevU 2017&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 08, 2017&lt;/span&gt; &amp;raquo; &lt;a href="/posts/sphericalharmonics1"&gt;Spherical Harmonics and applications in real time graphics (part 2)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;h2&gt;2016&lt;/h2&gt;
    &lt;h3&gt;December&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;December 27, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/sphericalharmonics0"&gt;Spherical Harmonics and applications in real time graphics&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;June&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;June 19, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/juneupdate"&gt;Latest Update&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;May&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;May 09, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/metallayerrefactoring"&gt;Vulkan prototype - metal layer refactoring&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;May 04, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkanmoreprogress"&gt;Vulkan latest progress -- core lighting working&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;April&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;April 22, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkandeclarativelightingparser"&gt;Vulkan prototype - how many separate render passes in the lighting parser?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;April 15, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkanbigissues"&gt;Vulkan prototype - the big issues&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;April 12, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkantips"&gt;Important Vulkan tips&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;April 08, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkanprototypeslowprogress"&gt;Vulkan prototype slowly progressing&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;April 05, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;April 04, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/vulkan"&gt;Starting to experiment with Vulkan&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;March&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;March 31, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/compareoitrans"&gt;Comparing different methods for order independent transparency&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 30, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/envshots"&gt;Environment Rendering Screenshots&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 26, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/release0040"&gt;Release v0.04.0&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 25, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/environmentsample"&gt;Environment Sample Streamlining&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;March 14, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/newtoolfeatures"&gt;Latest Tool Features&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;February&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;February 05, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmittedspecular3"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;February 01, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/improvedibl"&gt;Improved IBL&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;h3&gt;January&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;January 29, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmittedspecular2"&gt;Transmitted specular progress&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 26, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/assetpathscripts"&gt;Processing textures with the XLE scriptable asset path&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 25, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmittedspecular"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 22, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/transmissionnodegraph"&gt;Transmission Node Diagram&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;January 21, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;h2&gt;2015&lt;/h2&gt;
    &lt;h3&gt;December&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;December 16, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 11, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 09, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 04, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/whattodofirst"&gt;What to do first&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 02, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 01, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/first"&gt;First post&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

&lt;p&gt;&lt;img src="/assets/media/NyraAndDragon1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/media/EnvShots/shot50.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="posts/envshots"&gt;More screenshots&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/vulkanworkshop2017"&gt;Vulkan Workshop / DevU 2017&lt;/a&gt;&lt;br /&gt; &lt;span class="date"&gt;January 31, 2017&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;More on spherical harmonics is coming, but this is a slight intermission about Vulkan. Yesterday, I got a chance to attend a Vulkan workshop (called Vulkan DevU) in Vancouver, Canada. It was a short conference with talks by some of the Vulkan working group, with a mixture of both advanced and beginner sessions. You can get the slides &lt;a href="https://www.khronos.org/news/events/khronos-devu-vancouver-2017"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Unfortunately, isn't been awhile since I've touched the Vulkan implementation in XLE, and it wasn't fresh in my mind -- but I got a chance to meet some of the working group members and ask a bunch of random questions. Lately it's been difficult to find enough time to properly focus on low level graphics in XLE; I've had to prioritize other things.&lt;/p&gt;

&lt;p&gt;My impressions of Vulkan's strong points were re-affirmed by this conference. Vulkan has a fundamentally open nature and is naturally industry driven -- and working group showed a desire to become even more open; both by inviting contributions and suggesting they would change their NDA structure so they can speak about upcoming drafts sooner in the process.&lt;/p&gt;

&lt;p&gt;Vulkan creates a practical balance between compatibility and performance; and the team addressed that directly. They also spoke about their desire to keep Vulkan thin and avoid heuristics -- another great property of the library.&lt;/p&gt;

&lt;p&gt;So, they gave me every reason to think that Vulkan was in good hands. However, during the conversations we also started to touch upon some of the potential risks of the Vulkan concept. They were upfront about the desire to create a successor to OpenGL, which implies a very broad usage of the API (awesome!) but, in my opinion, there are some possible risks:&lt;/p&gt;

&lt;h3 id="toc_0"&gt;DirectX 12&lt;/h3&gt;

&lt;p&gt;After what seemed like an uncertain start, DX12 looks like it could be very strong. The fact that it shares many fundamental properties with Vulkan makes the two natural competitors.&lt;/p&gt;

&lt;p&gt;Part of DirectX's strength is that is has for many years worked hand and hand with GPU hardware development. Generally important (game oriented) hardware features need to be exposed by the DX API before they are "real" -- so Nvidia, AMD &amp;amp; Intel must fight it out to guide the API to best suit whatever hardware feature they want to emphasize. Over the years, both Nvidia and AMD have attempted to lessen their dependence on DX (with GL extensions or Mantle, etc) but it hasn't worked so well. If you want to make a major change (eg, multicore GPUs, bindless, etc), game developers have a tendency to ignore it until it's in DX.&lt;/p&gt;

&lt;p&gt;The problem for Vulkan is that it risks having to just trot along after DX, or becoming too bound to whichever hardware vendor that feels left out in the cold by the DX council (or, alternatively, mobile oriented hardware vendors that don't have as much skin in DirectX)&lt;/p&gt;

&lt;h3 id="toc_1"&gt;Shifting responsibilities onto engine teams&lt;/h3&gt;

&lt;p&gt;Vulkan shifts some of the responsibilities that were previously handled by GPU driver teams onto the game engine team. This is particularly obvious in areas such as memory management, scheduling and coherency... But it's a general principle, sometimes referred to as the "explicit" principle. For me, this is Vulkan's greatest attribute; but there are risks associated also.&lt;/p&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/vulkanworkshop2017" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/sphericalharmonics1"&gt;Spherical Harmonics and applications in real time graphics (part 2)&lt;/a&gt;&lt;br /&gt; &lt;span class="date"&gt;January 08, 2017&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;This is a continuation of the previous page; a tutorial for using spherical harmonic methods for real time graphics. On this page we start to dig into slightly more complex math concepts -- but I'll try to keep it approachable, while still sticking to the correct concepts and terms.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Integrating the diffuse BRDF&lt;/h2&gt;

&lt;p&gt;On the previous page, we reconstructed a value from a panorama map that was compressed as a spherical harmonic. The result is a blurry version of the original panorama.&lt;/p&gt;

&lt;p&gt;Our ultimate goal is much more exciting, though -- what if we could calculate the diffuse reflections at a material should exhibit, if it was placed within that environment?&lt;/p&gt;

&lt;p&gt;This is the fundamental goal of "image based" real time lighting methods. The easiest way to think about it is this -- we want to treat every texel of the input texture as a separate light. Each light is a small cone light at an infinite distance. The color texture of texel tells us the color and brightness of the light (and since we're probably using a HDR input texture, we can have a broad range of brightnesses).&lt;/p&gt;

&lt;p&gt;Effectively, the input texture represents the "incident" light on an object. We want to calculate the "excident" light -- or the light that reflects off in the direction of the eye. We're making an assumption that the lighting is coming from far away, and the object is small.&lt;/p&gt;

&lt;p&gt;Since our input texture has a finite number of texels, we could achieve this with a large linear sum:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;img src="/assets/media/SphericalHarmonics/sum_of_texels.png"&gt;
&lt;br&gt;
Where &lt;em&gt;t&lt;/em&gt; is a texel in the input texture, &lt;em&gt;I&lt;/em&gt; is the color in the input texture, &lt;em&gt;d&lt;/em&gt; is the direction defined by the mapping (ie, equirectangular or cubemap), &lt;em&gt;a&lt;/em&gt; is the solid angle of the texel, and &lt;em&gt;L()&lt;/em&gt; is our (somewhat less than bi-directional) BRDF. In spherical harmonic form, we would have to express this equation as a integral (because the spherical harmonic form is a non-discrete function).&lt;/p&gt;

&lt;p&gt;But we can do better than this. It might be tempting to consider the blurred spherical harmonic reconstruction of the environment as close enough -- but, again, we can do better!&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Zonal harmonics&lt;/h2&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/sphericalharmonics1" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/sphericalharmonics0"&gt;Spherical Harmonics and applications in real time graphics&lt;/a&gt;&lt;br /&gt; &lt;span class="date"&gt;December 27, 2016&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;Yikes; it's been awhile since my last update!&lt;/p&gt;

&lt;p&gt;I wanted to share a little bit of information from a technique I've recently been working on for an unrelated project. The technique uses a series of equations called "spherical harmonics" for extremely efficient high quality diffuse environment illumination.&lt;/p&gt;

&lt;p&gt;This is a technique that started to become popular maybe around 15 years ago -- possibly because of its usefulness on low power hardware. It fell out of favour for awhile, I was never entirely clear why. I got some good value from it back then, and I hope to get more good value from the technique now; so perhaps it's time for spherical harmonic's star to come around again?&lt;/p&gt;

&lt;p&gt;There's a fair amount of information about spherical harmonics on the internet, but some of can be a little dense. There seems to be lack of information on how to take the first few steps in applying this math to the graphics domain (for example, for diffuse environment lighting). So I'll try to keep this page approachable for graphics programmers, while also linking off to some of the more dense and abstract stuff later on. And I'll focus specifically on how I'm using this math for graphics, how I've used it in the past, and how I'd like that to grow in the future.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;What are spherical harmonics&lt;/h2&gt;

&lt;p&gt;The "spherical harmonics" are a series of equations that we'll use to compress lighting information greatly. The easiest way to understand them is to start with something simpler and analogous -- and that is cubic splines.&lt;/p&gt;

&lt;p&gt;Splines are a method of describing a curve through space with a finite number of points (or points and tangents). Even though the curve is defined by a finite number of parameters, the result is effectively an infinite number of points. To define the curve, we need equations of the form:&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;img src="/assets/media/SphericalHarmonics/basic_spline.png"&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;strong&gt;t&lt;/strong&gt; is the distance along the spline (usually between 0 and 1) and &lt;strong&gt;x&lt;/strong&gt;, &lt;strong&gt;y&lt;/strong&gt; &amp;amp; &lt;strong&gt;z&lt;/strong&gt; are cartesian coordinates.
In the case of cubic splines, the functions &lt;strong&gt;f&lt;/strong&gt;, &lt;strong&gt;h&lt;/strong&gt; and &lt;strong&gt;g&lt;/strong&gt; are cubic polynomials. If you've used Bezier splines before, you may be familiar with a way to express these polynomials using a form called a &lt;em&gt;"Bernstein polynomial"&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id="toc_1"&gt;Bernstein basis&lt;/h3&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/sphericalharmonics0" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/juneupdate"&gt;Latest Update&lt;/a&gt;&lt;br /&gt; &lt;span class="date"&gt;June 19, 2016&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;Work is still continuing on XLE! Over the last few weeks, I've have been very distracted by other priorities. I'm likely to be somewhat busy and distracted during for a few more weeks until things return to a more normal situation.
However, I'm still finding time to work on XLE, and make some improvements and fixes!&lt;/p&gt;

&lt;p&gt;Lately, my focus has been on &lt;strong&gt;Vulkan&lt;/strong&gt; support (in the &lt;em&gt;experimental&lt;/em&gt; branch). Vulkan is looking more and more stable and reliable, and the HLSL -&amp;gt; SPIR-V path is working really well now!
However, there are still some big things I want to improve on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improved interface for BoundUniforms, that can allow for precreation of descriptor sets during loading phases&lt;/li&gt;
&lt;li&gt;Improved interface for Metal::ConstantBuffer and temporary vertex/index buffers that would rely on a single large circular device buffer&lt;/li&gt;
&lt;li&gt;Pre-create graphics pipelines when using &lt;code&gt;SharedStateSet&lt;/code&gt; (eg, when rendering &lt;code&gt;RenderCore::Assets::ModelRenderer&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;(this might also involve a better solution for the render state resolver objects used by materials)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fix triangle hit-test supported used by the tools (which is complicated by the render pass concept and requires stream output support)&lt;/li&gt;
&lt;li&gt;Tessellation support for terrain rendering&lt;/li&gt;
&lt;li&gt;Integration of MSAA resolve for Vulkan&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these changes, we should start to see much more efficient results with the Vulkan pipeline. Some SceneEngine features won't work immediately, but otherwise we will be getting very good Vulkan results, while also retaining the DirectX compatibility! &lt;/p&gt;

&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/juneupdate" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/metallayerrefactoring"&gt;Vulkan prototype - metal layer refactoring&lt;/a&gt;&lt;br /&gt; &lt;span class="date"&gt;May 09, 2016&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;XLE has a thin layer over the underlying graphics API called "Metal". This was originally built for DirectX11 and OpenGLES. But over time it became more DirectX-focused. Part of the goal of building in Vulkan support was to provide a basis for refactoring and improving the metal layer.&lt;/p&gt;

&lt;p&gt;The goals for this layer are simple:
- compile time polymorphism between underlying graphics APIs
 - not link time or run time. We know the target during compilation of client code
- "leaky" abstraction layer
 - meaning that most client code is independent of the underlying graphics API
 - but the underlying objects are still accessible, so client code can write API-specific code when needed
- very thin, minimal overhead
 - for example, many DeviceContext methods get inlined into client code, meaning that performance is similar to using the underlying API directly&lt;/p&gt;

&lt;p&gt;To make this kind of layer work, we need to find abstractions that work well for all target APIs. Usually this means finding abstractions that are great for one API, and pretty good for other APIs. That can be tricky, particularly as APIs are changing and evolving over time.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Descriptor Set concept&lt;/h2&gt;

&lt;p&gt;Ideally we want the concept of "descriptor sets" to exist in the metal API somewhere. There are two reasons for this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clean up the DeviceContext interface so there are fewer BindXX(...) methods&lt;/li&gt;
&lt;li&gt;pre-cook permanent descriptor sets using BoundUniforms (or otherwise), so that they can be reused frame to frame&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/metallayerrefactoring" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="pagination"&gt;
  &lt;ul&gt;
      &lt;li class="active"&gt;&lt;a href="/posts/index/1"&gt;1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/index/2"&gt;2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/index/3"&gt;3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/index/4"&gt;4&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/index/5"&gt;5&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/index/6"&gt;6&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Pages</title>
      <link>http://xlgames-inc.github.io/pages</link>
      <description>
&lt;ul&gt;
  
    &lt;li&gt;&lt;a href="/about"&gt;About&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/archive"&gt;Archive&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/categories"&gt;Categories&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
  
    &lt;li class="active"&gt;&lt;a href="/pages" class="active"&gt;Pages&lt;/a&gt;&lt;/li&gt;
  
  
  
    &lt;li&gt;&lt;a href="/tags"&gt;Tags&lt;/a&gt;&lt;/li&gt;
  
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Tags</title>
      <link>http://xlgames-inc.github.io/tags</link>
      <description>
&lt;ul class="tag_box inline"&gt;
  &lt;li&gt;
    &lt;a href="/tags#PBR-ref"&gt;PBR &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#AreaLights-ref"&gt;AreaLights &lt;span&gt;5&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Roughness-ref"&gt;Roughness &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Materials-ref"&gt;Materials &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#AssetPath-ref"&gt;AssetPath &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Gradle-ref"&gt;Gradle &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#IBL-ref"&gt;IBL &lt;span&gt;3&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#OITrans-ref"&gt;OITrans &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Tools-ref"&gt;Tools &lt;span&gt;4&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Samples-ref"&gt;Samples &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Screenshots-ref"&gt;Screenshots &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#blog-ref"&gt;blog &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#D3D-ref"&gt;D3D &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#ShaderCompile-ref"&gt;ShaderCompile &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Lights-ref"&gt;Lights &lt;span&gt;3&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Specular-ref"&gt;Specular &lt;span&gt;4&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#GGX-ref"&gt;GGX &lt;span&gt;4&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Vulkan-ref"&gt;Vulkan &lt;span&gt;10&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#MaterialTool-ref"&gt;MaterialTool &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Shaders-ref"&gt;Shaders &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#cross platform-ref"&gt;cross platform &lt;span&gt;9&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Metal-ref"&gt;Metal &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#RectangleLights-ref"&gt;RectangleLights &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Releases-ref"&gt;Releases &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#SphericalHarmonics-ref"&gt;SphericalHarmonics &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#rendering-ref"&gt;rendering &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#API-ref"&gt;API &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#lighting-ref"&gt;lighting &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#shaders-ref"&gt;shaders &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#HLSL-ref"&gt;HLSL &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#SPIR-V-ref"&gt;SPIR-V &lt;span&gt;3&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;h3 id="PBR-ref"&gt;PBR&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="AreaLights-ref"&gt;AreaLights&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular2"&gt;Transmitted specular progress&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Roughness-ref"&gt;Roughness&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Materials-ref"&gt;Materials&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="AssetPath-ref"&gt;AssetPath&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/assetpathscripts"&gt;Processing textures with the XLE scriptable asset path&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Gradle-ref"&gt;Gradle&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/assetpathscripts"&gt;Processing textures with the XLE scriptable asset path&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="IBL-ref"&gt;IBL&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/assetpathscripts"&gt;Processing textures with the XLE scriptable asset path&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/improvedibl"&gt;Improved IBL&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular3"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="OITrans-ref"&gt;OITrans&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/compareoitrans"&gt;Comparing different methods for order independent transparency&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Tools-ref"&gt;Tools&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/environmentsample"&gt;Environment Sample Streamlining&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/newtoolfeatures"&gt;Latest Tool Features&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmissionnodegraph"&gt;Transmission Node Diagram&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Samples-ref"&gt;Samples&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/environmentsample"&gt;Environment Sample Streamlining&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Screenshots-ref"&gt;Screenshots&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/envshots"&gt;Environment Rendering Screenshots&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="blog-ref"&gt;blog&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/first"&gt;First post&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="D3D-ref"&gt;D3D&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="ShaderCompile-ref"&gt;ShaderCompile&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Lights-ref"&gt;Lights&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/improvedibl"&gt;Improved IBL&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular2"&gt;Transmitted specular progress&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Specular-ref"&gt;Specular&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/improvedibl"&gt;Improved IBL&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular2"&gt;Transmitted specular progress&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular3"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="GGX-ref"&gt;GGX&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/improvedibl"&gt;Improved IBL&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular2"&gt;Transmitted specular progress&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmittedspecular3"&gt;Transmitted specular&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Vulkan-ref"&gt;Vulkan&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/juneupdate"&gt;Latest Update&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/metallayerrefactoring"&gt;Vulkan prototype - metal layer refactoring&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkan"&gt;Starting to experiment with Vulkan&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanbigissues"&gt;Vulkan prototype - the big issues&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkandeclarativelightingparser"&gt;Vulkan prototype - how many separate render passes in the lighting parser?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanmoreprogress"&gt;Vulkan latest progress -- core lighting working&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanprototypeslowprogress"&gt;Vulkan prototype slowly progressing&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkantips"&gt;Important Vulkan tips&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanworkshop2017"&gt;Vulkan Workshop / DevU 2017&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="MaterialTool-ref"&gt;MaterialTool&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmissionnodegraph"&gt;Transmission Node Diagram&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Shaders-ref"&gt;Shaders&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/transmissionnodegraph"&gt;Transmission Node Diagram&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="cross platform-ref"&gt;cross platform&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/metallayerrefactoring"&gt;Vulkan prototype - metal layer refactoring&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkan"&gt;Starting to experiment with Vulkan&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanbigissues"&gt;Vulkan prototype - the big issues&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkandeclarativelightingparser"&gt;Vulkan prototype - how many separate render passes in the lighting parser?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanmoreprogress"&gt;Vulkan latest progress -- core lighting working&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanprototypeslowprogress"&gt;Vulkan prototype slowly progressing&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkantips"&gt;Important Vulkan tips&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanworkshop2017"&gt;Vulkan Workshop / DevU 2017&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Metal-ref"&gt;Metal&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/metallayerrefactoring"&gt;Vulkan prototype - metal layer refactoring&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="RectangleLights-ref"&gt;RectangleLights&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Releases-ref"&gt;Releases&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/release0040"&gt;Release v0.04.0&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="SphericalHarmonics-ref"&gt;SphericalHarmonics&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/sphericalharmonics0"&gt;Spherical Harmonics and applications in real time graphics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/sphericalharmonics1"&gt;Spherical Harmonics and applications in real time graphics (part 2)&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="rendering-ref"&gt;rendering&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/vulkan"&gt;Starting to experiment with Vulkan&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanworkshop2017"&gt;Vulkan Workshop / DevU 2017&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="API-ref"&gt;API&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/vulkan"&gt;Starting to experiment with Vulkan&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanworkshop2017"&gt;Vulkan Workshop / DevU 2017&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="lighting-ref"&gt;lighting&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanmoreprogress"&gt;Vulkan latest progress -- core lighting working&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="shaders-ref"&gt;shaders&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanmoreprogress"&gt;Vulkan latest progress -- core lighting working&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="HLSL-ref"&gt;HLSL&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanmoreprogress"&gt;Vulkan latest progress -- core lighting working&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="SPIR-V-ref"&gt;SPIR-V&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanmoreprogress"&gt;Vulkan latest progress -- core lighting working&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanprototypeslowprogress"&gt;Vulkan prototype slowly progressing&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/vulkanshaderprototype"&gt;HLSL shader prototype with Vulkan&lt;/a&gt;&lt;/li&gt;
 
</description>
    </item>
  </channel>
</rss>
