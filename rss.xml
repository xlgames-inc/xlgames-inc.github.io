<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>XLE development blog</title>
    <description>XLE development blog</description>
    <link>http://xlgames-inc.github.io</link>
    <pubDate>January 21, 2016</pubDate>
    <item>
      <title>About</title>
      <link>http://xlgames-inc.github.io/about</link>
      <description>&lt;p&gt;XLE is an open-source game engine (currently in development).&lt;/p&gt;

&lt;p&gt;Find us on Github:
    &lt;a href="https://github.com/xlgames-inc/XLE"&gt;https://github.com/xlgames-inc/XLE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Documentation starting point:
    &lt;a href="https://github.com/xlgames-inc/XLE/wiki"&gt;https://github.com/xlgames-inc/XLE/wiki&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Archive</title>
      <link>http://xlgames-inc.github.io/archive</link>
      <description>
  &lt;h2&gt;2016&lt;/h2&gt;
    &lt;h3&gt;January&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;January 21, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;h2&gt;2015&lt;/h2&gt;
    &lt;h3&gt;December&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;December 16, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 11, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 09, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 04, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/whattodofirst"&gt;What to do first&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 02, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 01, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/first"&gt;First post&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Categories</title>
      <link>http://xlgames-inc.github.io/categories</link>
      <description>
&lt;ul class="tag_box inline"&gt;
  &lt;li&gt;
    &lt;a href="/categories#XLE-ref"&gt;XLE &lt;span&gt;6&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/categories#blog-ref"&gt;blog &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;h3&gt;XLE (6)&lt;/h3&gt;
  &lt;ul&gt;
      &lt;li&gt;&lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/whattodofirst"&gt;What to do first&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;h3&gt;blog (1)&lt;/h3&gt;
  &lt;ul&gt;
      &lt;li&gt;&lt;a href="/posts/first"&gt;First post&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Home</title>
      <link>http://xlgames-inc.github.io/</link>
      <description>&lt;p&gt;
    XLE is a open-source (MIT license) game engine currently in development at XL Games.&lt;br /&gt;
    &lt;i&gt;Please note; this engine is still a work in progress!&lt;/i&gt;
&lt;/p&gt;
&lt;p&gt;For more information, see our &lt;a href="https://github.com/xlgames-inc/XLE/wiki"&gt;wiki on Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dev team contact: &lt;a href="mailto:xle@xlgames.com"&gt;xle@xlgames.com&lt;/a&gt; (in English or Korean)&lt;/p&gt;

  &lt;h2&gt;2016&lt;/h2&gt;
    &lt;h3&gt;January&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;January 21, 2016&lt;/span&gt; &amp;raquo; &lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;h2&gt;2015&lt;/h2&gt;
    &lt;h3&gt;December&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;December 16, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 11, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 09, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 04, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/whattodofirst"&gt;What to do first&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 02, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;December 01, 2015&lt;/span&gt; &amp;raquo; &lt;a href="/posts/first"&gt;First post&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

&lt;p&gt;&lt;img src="/assets/media/NyraAndDragon1.png"&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;br /&gt; &lt;span class="date"&gt;January 21, 2016&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;The master branch has just been updated! It now includes a major new tool, called the &lt;em&gt;MaterialTool&lt;/em&gt;. This is a dedicated app for building materials and applying them to objects, and includes some cool new features...&lt;/p&gt;

&lt;p&gt;In XLE, most material information can be authored in standard graphics packages (like 3DS Max, Maya, Substance Painter, etc). In particular, the most critical material values (&lt;strong&gt;color&lt;/strong&gt;, &lt;strong&gt;roughness&lt;/strong&gt;, &lt;strong&gt;specular&lt;/strong&gt; &amp;amp; &lt;strong&gt;metal&lt;/strong&gt;) can come directly from standard packages.&lt;/p&gt;

&lt;p&gt;But in cases we want to add custom information to models, or even develop custom shaders for complex materials. This is were the &lt;em&gt;MaterialTool&lt;/em&gt; comes in. There is some functionality in common with the &lt;em&gt;ModelViewer&lt;/em&gt; and &lt;em&gt;LevelEditor&lt;/em&gt; tools -- but the &lt;em&gt;MaterialTool&lt;/em&gt; provides a convenient focused tool for this kind of work.&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id="toc_0"&gt;Basic functionality&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;img src="/assets/media/MaterialTool/BasicWindow.png"&gt;&lt;/p&gt;

&lt;p&gt;Our core functionality allows us to preview a model (much like the &lt;em&gt;ModelViewer&lt;/em&gt;, with various rendering modes), click on materials and then change their properties (such as opacity, translucency modes, and various shader flags).&lt;/p&gt;

&lt;p&gt;This works within the Sony ATF framework, and so we have all of the handy features from the &lt;em&gt;LevelEditor&lt;/em&gt;, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;detachable, arrangeable windows&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;IronPython&lt;/em&gt; scripting and cvar access&lt;/li&gt;
&lt;li&gt;interface skinning, keyboard rebinding, etc...&lt;/li&gt;
&lt;li&gt;and, of course, it's all very extensible C# code, convenient for adding custom features&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/materialtool" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;br /&gt; &lt;span class="date"&gt;December 16, 2015&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;For many modern engines, the shear quantity of different configuration options for shaders can start to be a major burden. Many compile-time options can end up increasing the number of compiled shaders exponentially. It can get to the point where the shaders data image can make up a large segment of download time, and compile time can be a major hassle during development.&lt;/p&gt;

&lt;p&gt;For example, a pixel shader for forward lit scene elements will often need to be specialized to suit the number and types of lights nearby. If we have a few different types of lights, the number of combinations can become very quickly unmanageable.&lt;/p&gt;

&lt;p&gt;But we really need a lot of compile time options! They are very useful.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Dynamic linking methods in D3D&lt;/h2&gt;

&lt;p&gt;What we really need is a way to do dynamic linking of shaders -- so that we can construct the particular shader we need at runtime.&lt;/p&gt;

&lt;p&gt;D3D provides a few different methods for dynamic shader linking.
The one simple method involves "classes" and "interfaces."&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Classes and interfaces&lt;/h2&gt;

&lt;p&gt;In the shader code, we can define an interface like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;interface ILightResolver
{
    float3 Resolve(
        GBufferValues sample,
        LightSampleExtra sampleExtra,
        LightDesc light,
        float3 worldPosition,
        float3 directionToEye,
        LightScreenDest screenDest);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/functionlinkedshaders" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;br /&gt; &lt;span class="date"&gt;December 11, 2015&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;Just a quick note on rectangle light diffuse. In XLE, rectangle lights are slightly different from the default rectangle lights in 3DS Max.&lt;/p&gt;

&lt;style type="text/css"&gt;
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
.tg .tg-yw4l{vertical-align:top}
&lt;/style&gt;

&lt;table class="tg"&gt;
  &lt;tr&gt;
    &lt;th class="tg-yw4l"&gt;XLE lights&lt;/th&gt;
    &lt;th class="tg-yw4l"&gt;3DS Max lights (Quicksilver renderer)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class="tg-yw4l"&gt;&lt;img src="/assets/media/RectLightDiffuse/XLELightDiag.png"&gt;&lt;/td&gt;
    &lt;td class="tg-yw4l"&gt;&lt;img src="/assets/media/RectLightDiffuse/MaxLightDiag.png"&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class="tg-yw4l"&gt;&lt;img src="/assets/media/RectLightDiffuse/XLEDefault.png"&gt;&lt;/td&gt;
    &lt;td class="tg-yw4l"&gt;&lt;img src="/assets/media/RectLightDiffuse/MaxComparison.png"&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/rectlightdiffuse" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;br /&gt; &lt;span class="date"&gt;December 09, 2015&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;&lt;strong&gt;Post updated on 2015-12-10&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is just some notes about some ideas I've been playing with lately. I've been thinking about some improvements to the specular highlights for rectangle lights!&lt;/p&gt;

&lt;p&gt;The current implementation is based on the method by &lt;em&gt;Michal Drobot&lt;/em&gt; in &lt;strong&gt;GPU Pro 5&lt;/strong&gt;. I'm not going to repeat the description here (I'll only give a few details) -- but I recommend buying the book and having a look! It's quite a good method, and interesting read. Drobot describes a very practical method for diffuse and specular for rectangle and disc lights.&lt;/p&gt;

&lt;p&gt;However, at extreme angles, the specular reflection of rectangle lights can sometimes show some distortion.&lt;/p&gt;

&lt;p&gt;Here is a comparison:
&lt;style type="text/css"&gt;
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
.tg .tg-yw4l{vertical-align:top}
&lt;/style&gt;
&lt;/p&gt;
&lt;table class="tg"&gt;
  &lt;tr&gt;
    &lt;th class="tg-yw4l"&gt;Original Method&lt;/th&gt;
    &lt;th class="tg-yw4l"&gt;New Method&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class="tg-yw4l"&gt;&lt;img src="/assets/media/RectLightImprovements/BasicRectLight.png"&gt;&lt;/td&gt;
    &lt;td class="tg-yw4l"&gt;&lt;img src="/assets/media/RectLightImprovements/ImprovedRectLight.png"&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/workingonrectlights" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="post"&gt;
  &lt;h3 class="title"&gt;&lt;a href="/posts/whattodofirst"&gt;What to do first&lt;/a&gt;&lt;br /&gt; &lt;span class="date"&gt;December 04, 2015&lt;/span&gt;&lt;/h3&gt;

  &lt;div class="summary ellipsis"&gt;
&lt;p&gt;So, you've just downloaded XLE, and you're wondering what to do first? Here's a suggestion for the first 10 minutes:&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id="toc_0"&gt;Startup the level editor&lt;/h2&gt;

&lt;p&gt;Select the Level Editor as the startup project:
&lt;br&gt;&lt;img src="/assets/media/SolutionExplorerLE.png"&gt;&lt;/p&gt;

&lt;p&gt;You should use the &lt;strong&gt;Debug/x64&lt;/strong&gt; or &lt;strong&gt;Release/x64&lt;/strong&gt; configuration. Though XLE works in both 32 bit and 64 bits modes, normal usage for the level editor should be in 64 bits mode.&lt;/p&gt;

&lt;p&gt;If you have trouble compiling, see the &lt;a href="https://github.com/xlgames-inc/XLE/wiki/CompilingFirstSteps"&gt;Getting Started Compiling page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Start up this application, and you should see a large 3D window and various other windows about.&lt;/p&gt;

&lt;p&gt;The level editor is based on a great project from Sony WWS &lt;a href="https://github.com/SonyWWS/LevelEditor"&gt;SonyWWSLevelEditor&lt;/a&gt;.
It has been modified to work with XLE, and some XLE specific behaviour has been added. I think this is a great example of the Open Source concept working for games developers.&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id="toc_1"&gt;Creating an object&lt;/h2&gt;
&lt;/div&gt;

  &lt;div class="more"&gt;
    &lt;a href="/posts/whattodofirst" class="btn btn-small"&gt;read more..&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="pagination"&gt;
  &lt;ul&gt;
      &lt;li class="active"&gt;&lt;a href="/posts/index/1"&gt;1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="/posts/index/2"&gt;2&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    <item>
      <title>Pages</title>
      <link>http://xlgames-inc.github.io/pages</link>
      <description>
&lt;ul&gt;
  
    &lt;li&gt;&lt;a href="/about"&gt;About&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/archive"&gt;Archive&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/categories"&gt;Categories&lt;/a&gt;&lt;/li&gt;
  
  
    &lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
  
    &lt;li class="active"&gt;&lt;a href="/pages" class="active"&gt;Pages&lt;/a&gt;&lt;/li&gt;
  
  
  
    &lt;li&gt;&lt;a href="/tags"&gt;Tags&lt;/a&gt;&lt;/li&gt;
  
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Tags</title>
      <link>http://xlgames-inc.github.io/tags</link>
      <description>
&lt;ul class="tag_box inline"&gt;
  &lt;li&gt;
    &lt;a href="/tags#PBR-ref"&gt;PBR &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#AreaLights-ref"&gt;AreaLights &lt;span&gt;3&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Roughness-ref"&gt;Roughness &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Materials-ref"&gt;Materials &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#blog-ref"&gt;blog &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#D3D-ref"&gt;D3D &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#ShaderCompile-ref"&gt;ShaderCompile &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#MaterialTool-ref"&gt;MaterialTool &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Tools-ref"&gt;Tools &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#Shaders-ref"&gt;Shaders &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a href="/tags#RectangleLights-ref"&gt;RectangleLights &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;h3 id="PBR-ref"&gt;PBR&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="AreaLights-ref"&gt;AreaLights&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Roughness-ref"&gt;Roughness&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Materials-ref"&gt;Materials&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/arealightsandpbr"&gt;Area Lights with Physically Based Rendering&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="blog-ref"&gt;blog&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/first"&gt;First post&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="D3D-ref"&gt;D3D&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="ShaderCompile-ref"&gt;ShaderCompile&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/functionlinkedshaders"&gt;Dynamic Function Linking Graph for Shaders&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="MaterialTool-ref"&gt;MaterialTool&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Tools-ref"&gt;Tools&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="Shaders-ref"&gt;Shaders&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/materialtool"&gt;Material and Node Diagram Tool&lt;/a&gt;&lt;/li&gt;
  &lt;h3 id="RectangleLights-ref"&gt;RectangleLights&lt;/h3&gt;
    &lt;li&gt;&lt;a href="/posts/rectlightdiffuse"&gt;Rectangle Light diffuse vs 3DS Max&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/posts/workingonrectlights"&gt;Working some improvements to rectangle lights&lt;/a&gt;&lt;/li&gt;
 
</description>
    </item>
  </channel>
</rss>
